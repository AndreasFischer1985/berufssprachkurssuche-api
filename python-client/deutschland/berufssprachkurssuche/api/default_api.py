"""
    Arbeitsagentur Berufssprachkurssuche API

    Eine der größten Berufssprachförderungsdatenbanken Deutschlands durchsuchen.   Die Authentifizierung funktioniert per OAuth 2 Client Credentials mit JWTs. Folgende Client-Credentials können dafür verwendet werden:  **ClientID:** bd24f42e-ad0b-4005-b834-23bb6800dc6c  **ClientSecret:** 6776b89e-5728-4643-8cd5-c93aefb5314b   **Achtung**: der generierte Token muss bei folgenden GET-requests im header als 'OAuthAccessToken' inkludiert werden.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: andreasfischer1985@web.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.berufssprachkurssuche.api_client import ApiClient
from deutschland.berufssprachkurssuche.api_client import Endpoint as _Endpoint
from deutschland.berufssprachkurssuche.model.response import Response
from deutschland.berufssprachkurssuche.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.berufssprachkurssuche_endpoint = _Endpoint(
            settings={
                "response_type": (Response,),
                "auth": ["clientCredAuth"],
                "endpoint_path": "/pc/v1/bildungsangebot",
                "operation_id": "berufssprachkurssuche",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "suchworte",
                    "orte",
                    "page",
                    "umkreis",
                    "sprachniveau",
                    "berufsfachsprachkurse",
                    "beginntermine",
                    "unterrichtsformen",
                    "anbieter",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "umkreis",
                    "sprachniveau",
                    "berufsfachsprachkurse",
                    "beginntermine",
                    "unterrichtsformen",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("umkreis",): {
                        "BUNDESWEIT": "Bundesweit",
                        "25": "25",
                        "50": "50",
                        "100": "100",
                        "150": "150",
                        "200": "200",
                    },
                    ("sprachniveau",): {
                        "201": "MC%2001%201",
                        "202": "MC%2001%202",
                        "203": "MC%2001%203",
                        "204": "MC%2001%204",
                        "205": "MC%2001%205",
                    },
                    ("berufsfachsprachkurse",): {"2002": "MC%2002", "2003": "MC%2003"},
                    ("beginntermine",): {
                        "1": 1,
                        "2": 2,
                        "3": 3,
                        "4": 4,
                        "5": 5,
                        "6": 6,
                    },
                    ("unterrichtsformen",): {
                        "1": 1,
                        "2": 2,
                        "6": 6,
                        "3": 3,
                        "5": 5,
                        "0": 0,
                    },
                },
                "openapi_types": {
                    "suchworte": (str,),
                    "orte": (str,),
                    "page": (int,),
                    "umkreis": (str,),
                    "sprachniveau": (str,),
                    "berufsfachsprachkurse": (str,),
                    "beginntermine": (int,),
                    "unterrichtsformen": (int,),
                    "anbieter": (int,),
                },
                "attribute_map": {
                    "suchworte": "suchworte",
                    "orte": "orte",
                    "page": "page",
                    "umkreis": "umkreis",
                    "sprachniveau": "sprachniveau",
                    "berufsfachsprachkurse": "berufsfachsprachkurse",
                    "beginntermine": "beginntermine",
                    "unterrichtsformen": "unterrichtsformen",
                    "anbieter": "anbieter",
                },
                "location_map": {
                    "suchworte": "query",
                    "orte": "query",
                    "page": "query",
                    "umkreis": "query",
                    "sprachniveau": "query",
                    "berufsfachsprachkurse": "query",
                    "beginntermine": "query",
                    "unterrichtsformen": "query",
                    "anbieter": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def berufssprachkurssuche(self, **kwargs):
        """Berufssprachkurssuche  # noqa: E501

        Die Berufssprachkurssuche ermöglicht verfügbare Berufssprachkursangebote mit verschiedenen GET-Parametern zu filtern.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.berufssprachkurssuche(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            suchworte (str): Suchworte (z.B. Deutschsprachf%25C3%25B6rderung,Berufsbezogener%2520Englischkurs). Mehrere Komma-getrennte Angaben möglich.. [optional]
            orte (str): Ortsangabe nebst Postleitzahl und Koordinaten (z.B. Feucht_90537_11.224918_49.376701,N%C3%BCrnberg;%20Mittelfranken_11.0753_49.4508). Mehrere Komma-getrennte Angaben möglich.. [optional]
            page (int): Seite (beginnend mit 0 für die erste Seite).. [optional]
            umkreis (str): Umkreis - Bundesweit=Bundesweit, 25=25 km, 50=50 km, 100=100 km, 150=150 km, 200=200 km.. [optional]
            sprachniveau (str): Sprachzielniveau - MC%2001%201=A2, MC%2001%202=B1, MC%2001%203=B2, MC%2001%204=C1, MC%2001%205=C2. Mehrere Komma-getrennte Angaben möglich.. [optional]
            berufsfachsprachkurse (str): Berufsfachsprachkurse - MC%2002=Spezialberufskurs, MC%2003=Berufsanerkennung. Mehrere Komma-getrennte Angaben möglich.. [optional]
            beginntermine (int): Beginntermin - 0=regelmäßiger Start, 1=diesen Monat, 2=nächster Monat, 3=übernächster Monat, 4=überübernächster Monat, 5=spätere Termine, 6=frühere Termine. Mehrere Komma-getrennte Angaben möglich.. [optional]
            unterrichtsformen (int): Lernform - 1=Vollzeit, 2=Teilzeit, 6=Blockunterricht, 3=Wochenendveranstaltung, 5=E-Learning, 0=Auf Anfrage. Mehrere Komma-getrennte Angaben möglich.. [optional]
            anbieter (int): Anbieter-ID - numerische ID (z.B. 16574). Mehrere Komma-getrennte Angaben möglich. Bei größeren Treffermengen ist für die Verwendung des Filters nach Anbietern eine Einschränkung auf Ort, Suchbegriff oder Umkreis erforderlich.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.berufssprachkurssuche_endpoint.call_with_http_info(**kwargs)
